buildscript {
    ext {
        kotlinVersion = '1.3.50'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.3'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8"
        classpath 'com.vdurmont:semver4j:3.1.0'
    }
}

plugins {
    id 'java'
    id 'groovy'
    id 'idea'
    id 'checkstyle'
    id 'codenarc'
    id 'me.champeau.gradle.jmh' version '0.5.0'
    id 'org.jetbrains.intellij' version '0.4.13'
    id 'net.saliman.cobertura' version '3.0.0'
    id 'com.github.ben-manes.versions' version '0.27.0'
}

apply plugin: 'kotlin'
if (JavaVersion.current().isJava8Compatible()) {
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'org.sonarqube'

    sonarqube {
        properties {
            property 'sonar.java.source', '1.6'
        }
    }
}


group 'com.github.platan'
project.version = '0.5.4-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    ideaVersion = project.hasProperty('ideaVersion') ? project.getProperty('ideaVersion') : ideaVersion
    kotlinVersion = '1.3.50'
}

intellij {
    version = ideaVersion
    type = 'IC'
    plugins = ['Groovy', 'gradle', 'properties', 'junit'] + javaPlugin()
    downloadSources = false
    updateSinceUntilBuild = false
    instrumentCode = false
}

import com.vdurmont.semver4j.Semver

List<String> javaPlugin() {
    def ideaMainVersion = getIdeaMainVersion()
    ideaVersion == 'LATEST-EAP-SNAPSHOT' || new Semver(ideaMainVersion, Semver.SemverType.LOOSE).isGreaterThanOrEqualTo('2019.2') ? ['java'] : []
}

String spockVersion() {
    def ideaVersion = getIdeaMainVersion()
    def ideaToGroovy = ['14.0': '2.2', '14.1': '2.3', '15.0': '2.3']
    def groovyToSpock = ['2.0': '2.0', '2.1': '2.0', '2.2': '2.0', '2.3': '2.3', '2.4': '2.4']
    def groovyForSpock = groovyToSpock.get(ideaToGroovy[ideaVersion], '2.4')
    if (!groovyForSpock) {
        throw new GradleException("Cannot resolve Spock version for Intellij IDEA version ${ideaVersion}!")
    }
    "1.0-groovy-${groovyForSpock}"
}

private String getIdeaMainVersion() {
    String version = ideaVersion
    if (version.startsWith('LATEST'))
        return 'LATEST'
    def versionMatcher
    if ((versionMatcher = version =~ /^(?:(?:IU|UC)-)?(\d+\.\d+)\.\d+/)) {
        return versionMatcher.group(1)
    }
    if ((versionMatcher = version =~ /^(?:(?:IU|UC)-)?(\d+\.\d+)/)) {
        return versionMatcher.group(1)
    }
    throw new GradleException('Cannot parse IntelliJ IDEA version: ' + version)
}

dependencies {
    compile files("src/main/resources")

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    compile 'com.intellij:annotations:12.0'
    testCompile("org.spockframework:spock-core:${spockVersion()}") {
        exclude module: 'groovy-all'
    }
    // without this dependency I get java.lang.NoClassDefFoundError: kotlin/reflect/jvm/ReflectJvmMapping
    // in StringNotationToMapNotationIntentionTest, MapNotationToStringNotationIntentionTest and SortDependenciesTest
    // workaround from https://baijifeilong.github.io/2018/06/27/kotlin/
    testCompile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: "$kotlinVersion"

    compile 'javax.xml.bind:jaxb-api:2.3.1'
    compile 'com.sun.xml.bind:jaxb-core:2.3.0.1'
    compile 'com.sun.xml.bind:jaxb-impl:2.3.2'
    compile 'javax.activation:activation:1.1.1'
}

configurations {
    all*.exclude group: 'org.gmetrics', module: 'GMetrics'
}

idea {
    module {
        scopes.TEST.plus += [configurations.jmh]
    }
}

codenarc {
    configFile = file("${project.rootDir}/config/codenarc/rules.groovy")
    toolVersion = codenarcToolVersion
}

cobertura.coverageFormats = ['html', 'xml']

checkstyle {
    toolVersion = checkstyleToolVersion
    configFile = file("${project.rootDir}/config/checkstyle/checks.xml")
}

test {
    jvmArgs '-XX:MaxPermSize=256m'
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}

if (JavaVersion.current().isJava10()) {
    compileJava {
        options.compilerArgs += ["--add-modules", "java.xml.bind"]
    }

    compileTestJava {
        options.compilerArgs += ["--add-modules", "java.xml.bind"]
    }

    test {
        jvmArgs += ["--add-modules", "java.xml.bind"]
    }
}
